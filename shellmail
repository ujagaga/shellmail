#!/bin/sh

RECEPIENT="shellmail.service@gmail.com"
FROM="shellmail.service@gmail.com"
SUBJECT="Shellmail notification"
PASSWORD="Not publicly available. Use binary from deb package, it has embeded password"

MSG_BODY=""
CFG=$HOME/.shellmail/shellmail.conf
count=0

parse_param() {
	
	var1=$(echo $1 | cut -f1 -d=)
	var2=$(echo $1 | cut -f2 -d=)
	
	case  $var1 in
        "DefaultRecepient")  
			if [ ! -z "$var2" -a "$var2" != " " ]; then
				# Str is not null or space
				RECEPIENT=$var2
			fi          		
            ;;
        "AuthUser")
			if [ ! -z "$var2" -a "$var2" != " " ]; then
				# Str is not null or space
				FROM=$var2 
			fi 	    	         
            ;;            
        "AuthPass")  
			if [ ! -z "$var2" -a "$var2" != " " ]; then
				# Str is not null or space
				PASSWORD=$var2 
			fi
            ;;
		"DefaultSubject") 
			if [ ! -z "$var2" -a "$var2" != " " ]; then
				# Str is not null or space
				SUBJECT=$var2 
			fi 
            ;;
        *)              
	esac 	
} 


print_help(){
	echo ""
	echo "Shellmail script for simplifying email sending via ssmtp"
	echo "usage:"
	echo " shellmail [<switch> <parameter>] [<Optional text message to send>]"
	echo ""
	echo " Examples: "
	echo "  shellmail	# sends a blank email to default recepient"
	echo "  shellmail -r some_recepient@some.domain 'Some message'"
	echo ""
	echo "  switches:"
	echo "  -h or -help	# prints this dialog"
	echo "  -r		# specify a recipient or space separated list of recipients"
	echo "			# eg. shellmail -r recepient@some.domain"
	echo "			# or shellmail -r 'rec1@some.domain rec2@some.domain rec3@some.domain'"
	echo "  -l		# specify file with email list (one email address per row and up to 20 of them are considered)"
	echo "  -s		# specify subject"
	echo "  -c		# configure defaults"
	echo "  The first string encountered not starting with - character is considered to be"
	echo " 	the message text or path to a text file containing the message"
	echo ""	
}

check_recepient(){	
	case "$1" in *@*)
		# recepient string contains @ symbol
		# extract the second part after @
		var1=$(echo $1 | cut -f2 -d@)
		
		# check if it contains . symbol
		case "$var1" in *.*)
		;;*) 
			echo "shellmail error: Invalid recepient email specified: $1"
			exit 1
		;;
		esac
	;;*) 
		echo "shellmail error: Invalid recepient email specified: $1"
		exit 1
	;;
	esac
}

parse_recepient(){
	check_recepient "$1"
	
	RECEPIENT=$1 
}

add_to_recepient_list() {
	first=$(echo $1 | cut -f1 -d " ")

	check_recepient $first
	RECEPIENT="$RECEPIENT $first" 
	count=$((count+1))
}

parse_recepient_list() {	
	RECEPIENT=""
	LIST_PATH="/tmp/$1"

	cp -f $1 /tmp

	# add additional new line to include the last line added
	echo "" >> $LIST_PATH
	
	count=0
	while read i; do		

		if [ $count -gt 20 ]; then
			echo "Limited the e-mail list to 20 addresses"
			break
		fi

		#check recipient
		case "$i" in *@*)
			# recepient string contains @ symbol
			# extract the second part after @
			var1=$(echo $1 | cut -f2 -d@)
		
			# check if it contains . symbol
			case "$var1" in *.*)
				# seems like a valid email address
				add_to_recepient_list "$i"	
			;;*) 
			;;
			esac
		;;*) 			
		;;
		esac
	done <$LIST_PATH
} 

parse_message(){	
	case "$1" in 	
	-*) 
		# parameter starts with "-" so it is treated as a switch
		echo "shellmail error: Expecting parameter to be the message text, not switch: $1"
		print_help
		exit 1
		;;
	*)							
	;;
	esac

	MSG_BODY=$1	
}

configure_defaults(){	
	"${EDITOR:-mousepad}" $CFG 

	exit 0
}



while read i ; do parse_param "$i" ; done < $CFG


if [ "$#" -eq 5 ]; then
	# There are 5 parameters. Expecting <switch value> <switch value> <message>.
	parse_message "$5"
fi

if [ "$#" -eq 3 ]; then
	# There are 3 parameters. Expecting <switch value> <message>.
	parse_message "$3"
fi

if [ "$#" -eq 1 ]; then
	# There is only 1 parameter. Expecting <message> or -h of -c.
	case  $1 in
		"-h")       
			print_help
			exit 0
			;;
		"-help")       
			print_help
			exit 0
			;; 
		"-c")       
			configure_defaults
			;;
		*)    
			parse_message "$1"		
			;;         
	esac 
fi

if [ "$#" -gt 3 ]; then
	# There are at least 4 parameters. Expecting <switch value> <switch value> [<message>]. 
	# Parse first parameter
	
	case  $1 in
		"-h")       
			print_help
			exit 0
		    ;;
		"-help")       
			print_help
			exit 0
		    ;;           
		"-r")       
			parse_recepient "$2" 			
		    ;;
		"-s")       
			SUBJECT=$2 			
		    ;;
		"-c")       
			configure_defaults		
		    ;;
		"-l")       
			# specified list of recepients
			parse_recepient_list "$2"		
		    ;;
		*)    
			case "$1" in 
				-*) 
				    echo "shellmail error: Invalid switch $1"
					exit 1
					;;
				*)					
				;;
			esac			
			;;         
	esac 
		
	# Parse third parameter
	case  $3 in
		"-h")       
			print_help
			exit 0
		    ;;
		"-help")       
			print_help
			exit 0
		    ;;           
		"-r")       
			parse_recepient "$4" 			
		    ;;
		"-s")       
			SUBJECT=$4 			
		    ;;
		"-c")       
			configure_defaults
			;;
		"-l")       
			# specified list of recepients
			parse_recepient_list "$4"		
		    ;;
		*)    
			case "$3" in 
				-*) 
				    echo "shellmail error: Invalid switch $3"
					exit 1
					;;
				*)					
				;;
			esac			
			;;         
	esac 
else
	if [ "$#" -gt 1 ]; then
		# There are at least 2 parameters. Expecting <switch value> [<message>]. 
		# Parse first parameter
	
		case  $1 in
			"-h")       
				print_help
				exit 0
				;;
			"-help")       
				print_help
				exit 0
				;;           
			"-r")       
				parse_recepient "$2" 			
				;;
			"-s")       
				SUBJECT=$2 			
				;;
			"-c")       
				configure_defaults
				;;
			"-l")       
				# specified list of recepients
				parse_recepient_list "$2"		
				;;
			*)    
				case "$1" in 
					-*) 
						echo "shellmail error: Invalid switch $1"
						exit 1
						;;
					*)					
					;;
				esac			
				;;         
		esac 	
	fi	
fi

if [ ${#RECEPIENT} -lt 128 ]; then
	echo "Shellmail: Sending an e-mail to $RECEPIENT"
else
	echo "Shellmail: Sending an e-mail to a mail list"
fi


echo "To: $RECEPIENT" > /tmp/email.template
echo "Subject: $SUBJECT" >> /tmp/email.template
echo "" >> /tmp/email.template

if [ -f "$MSG_BODY" ]
then
	# MSG_BODY is a path to a file
	cat $MSG_BODY >> /tmp/email.template
	echo "Shellmail: Sending file $MSG_BODY as message text"
else
	# MSG_BODY is not a path to a file
	echo "$MSG_BODY" >> /tmp/email.template
	
	if [ ${#MSG_BODY} -gt 1 ]; then
		echo "Shellmail: sending specified string as message text"
	fi
fi

ssmtp -C $CFG -F "Shellmail" -au $FROM -ap $PASSWORD $RECEPIENT < /tmp/email.template
